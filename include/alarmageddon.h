// TODO: make a header for each class and include them here. use curlies for all my inline ifs too

#ifndef ALARMAGEDDON_H
#define ALARMAGEDDON_H

#include <utility>
#include <Adafruit_SSD1306.h>
#include <Arduino.h>
#include <ESP32Encoder.h>
#include <esp_now.h>
#include <Preferences.h>
#include <WiFi.h>

// forward declarations for screen classes
class MenuScreen;
class ClockScreen;
class AlarmScreen;
class WifiScreen;
class SettingsScreen;
class ApListScreen;
class PasswordScreen;
class InitializationScreen;
class SetClockScreen;
class TimeZoneScreen;
class CustomTzScreen;

// extern globals from main
extern const unsigned short titleSize;
extern const unsigned short screenWidth;
extern const unsigned short screenHeight;
extern Adafruit_SSD1306 display;
extern tm timeData;
extern unsigned short screenIndex;
extern unsigned short visibleCount;
extern MenuScreen *container[10];
extern char ssid[33];
extern char password[64];
extern bool alarmOn;
extern bool alarmSet;
extern bool is24Hour;
extern bool displaysSeconds;
extern short clockSecond;
extern short clockMinute;
extern short clockHour;
extern short alarmHour;
extern short alarmMinute;
extern const char *tzString;

// helper functions
int getCenteredCursorX(const char *text);
int getCenteredCursorFormattedX(unsigned short bufferSize, const char *text, ...);
void printfCenteredTextX(unsigned short bufferSize, const char *text, ...);
void printCenteredTextX(const char *text, bool newLine = false);
void printSelectable(bool isSelected, const char *text);
void printfSelectable(unsigned short bufferSize, bool isSelected, const char *text, ...);
void printButton(short padding, short radius, const char *text);
bool connectToNtp();
bool connectToWifi(const char *enterSsid, const char *enterPassword, bool trySaved = false, bool tryNtp = true);
void setAlarmStatus(bool status);
void setDisplayToDefault();
void setActiveScreen(int nextIndex);
std::pair<unsigned short, bool> convert24To12(unsigned short hour);
unsigned short convert12To24(unsigned short hour, bool isPM);
int wrapNumber(int number, int min, int max);
void saveCredentials();
void loadCredentials();
void saveSettings();

enum ScreenIndex // TODO: put append _SCREEN to all of these
{
    CLOCK = 0,
    ALARM = 1,
    WIFI = 2,
    SETTINGS = 3,
    AP_LIST = 4,
    PASSWORD = 5,
    INIT = 6,
    SET_CLOCK = 7,
    TIME_ZONE = 8,
    CUSTOM_TZ_SCREEN = 9
};

// base class
class MenuScreen
{
public:
    virtual void setup() = 0;
    virtual void loop() = 0;
    virtual void render() = 0;
    virtual void left() = 0;
    virtual void right() = 0;
    virtual void select() = 0;
    short selectedIndex = 0;
    short topIndex = 0;
    bool buttonPressed = false;
};

// sub classes
class ClockScreen : public MenuScreen
{
private:
    unsigned long clockMillis;
    const char *getDayOfWeekName(int day);

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class AlarmScreen : public MenuScreen
{
private:
    short selectionIndex = 0;
    short displayHour = 0;
    short displayMinute = 0;
    char status[2][4] = {"Off", "On"};
    char meridian[2][3] = {"AM", "PM"};
    bool isPM = false;
    short cycleLength = 24;

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class WifiScreen : public MenuScreen
{
private:
    const char *connectedList[4] = {"Back", "Disconnect", "Set time zone", "Sync time"};
    const char *disconnectedList[5] = {"Back", "Reconnect", "Scan", "Set time zone", "Sync time"};
    wl_status_t wifiStatus;
    wl_status_t wifiStatusPrevious;

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class SettingsScreen : public MenuScreen
{
private:
    /*const unsigned char epd_bitmap_weightoftheworldSMOL[1024] PROGMEM = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x3e, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xbc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x22, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x9b, 0x79, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x40, 0x04, 0xfb, 0x60, 0x01, 0x6d, 0x90, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xb4, 0x00, 0x40, 0x00, 0x00, 0x3c, 0x03, 0x49, 0x64, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x70, 0x04, 0x01, 0x60, 0xf0, 0x00, 0x01, 0xce, 0x40, 0x18, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x0b, 0xff, 0xf0, 0x0c, 0x00, 0x00, 0x51, 0x21, 0x06, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x90, 0x0f, 0xbb, 0xfe, 0xc0, 0x07, 0xfd, 0x00, 0x10, 0x00, 0x25, 0x00,
        0x00, 0x01, 0xc0, 0x06, 0x00, 0x00, 0x03, 0x0d, 0x13, 0x70, 0x03, 0x70, 0xa0, 0x92, 0x09, 0x00,
        0x00, 0x06, 0x30, 0x68, 0x00, 0x00, 0x10, 0xe1, 0x88, 0x00, 0x00, 0x0c, 0x08, 0x00, 0x81, 0x80,
        0x00, 0x0c, 0x1b, 0xc0, 0x00, 0x00, 0x10, 0xe3, 0x8c, 0x00, 0x00, 0x00, 0x40, 0x40, 0x24, 0x00,
        0x00, 0x30, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x48, 0x03, 0x00, 0x00, 0x00, 0x60, 0x04, 0x01, 0x00,
        0x00, 0xc0, 0x04, 0x1c, 0x07, 0xc0, 0x60, 0x11, 0x01, 0x1a, 0x03, 0x00, 0x08, 0x10, 0x40, 0x80,
        0x00, 0xc0, 0x04, 0x03, 0xb0, 0x00, 0x40, 0x10, 0x41, 0x0f, 0x20, 0xe0, 0x40, 0x42, 0x10, 0x80,
        0x03, 0x00, 0x06, 0x00, 0x60, 0x09, 0x00, 0x20, 0x46, 0x00, 0x64, 0x30, 0x44, 0x08, 0x03, 0x00,
        0x06, 0x00, 0x02, 0x01, 0x01, 0xec, 0x60, 0x20, 0x04, 0x00, 0x09, 0x0c, 0x20, 0x00, 0x00, 0x80,
        0x04, 0x00, 0x01, 0x02, 0x01, 0x80, 0x38, 0x00, 0x20, 0x09, 0x00, 0x06, 0x12, 0x00, 0x00, 0x80,
        0x08, 0x00, 0x01, 0x06, 0x02, 0x00, 0x09, 0x50, 0x64, 0xee, 0xc0, 0x01, 0x00, 0x04, 0x12, 0x00,
        0x18, 0x00, 0x01, 0x84, 0x00, 0x00, 0x09, 0x16, 0x84, 0x00, 0x3b, 0x00, 0x61, 0x01, 0x01, 0x90,
        0x10, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0xe0, 0x10, 0x40, 0x80, 0x40,
        0x20, 0x00, 0x00, 0x90, 0x01, 0xbe, 0x08, 0x00, 0x04, 0x00, 0x00, 0x18, 0x90, 0x04, 0x82, 0x40,
        0x20, 0x00, 0x00, 0xc0, 0x00, 0x04, 0xe4, 0x00, 0x11, 0x66, 0x60, 0x00, 0x88, 0x00, 0x00, 0x30,
        0x60, 0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 0x0b, 0xd3, 0x25, 0x9c, 0x00, 0x20, 0x01, 0x00, 0x10,
        0x60, 0x00, 0x00, 0x40, 0x1f, 0x03, 0x33, 0x68, 0x04, 0x00, 0x0b, 0xe1, 0x10, 0x00, 0x02, 0x14,
        0x21, 0x80, 0x00, 0x64, 0xe0, 0x79, 0x04, 0x00, 0x04, 0x00, 0x0b, 0x3f, 0x00, 0x80, 0x10, 0x18,
        0x27, 0x00, 0x00, 0x23, 0x09, 0x80, 0x04, 0x85, 0xb2, 0x00, 0x09, 0x00, 0xe2, 0x21, 0x00, 0x08,
        0x3c, 0x00, 0x00, 0x28, 0x26, 0x00, 0x1a, 0x41, 0x09, 0x00, 0x12, 0x00, 0x20, 0x00, 0x22, 0x28,
        0x30, 0x00, 0x00, 0x23, 0xf8, 0x00, 0x1b, 0x10, 0x21, 0x80, 0x12, 0x00, 0x20, 0x00, 0x18, 0x20,
        0x10, 0x00, 0x00, 0x1e, 0x8c, 0x00, 0x21, 0xc0, 0xc4, 0xc0, 0x36, 0x00, 0x64, 0x40, 0x08, 0x08,
        0x18, 0x00, 0x00, 0x18, 0xa6, 0x00, 0x24, 0x60, 0x92, 0x40, 0x24, 0x00, 0x10, 0x00, 0x02, 0x48,
        0x08, 0x00, 0x00, 0x30, 0x43, 0x00, 0x64, 0x9d, 0x22, 0x60, 0x34, 0x00, 0x10, 0x24, 0x00, 0x10,
        0x04, 0x00, 0x00, 0x10, 0x49, 0x00, 0xc1, 0x84, 0x08, 0x30, 0x24, 0x00, 0x10, 0x22, 0x24, 0x50,
        0x06, 0x00, 0x00, 0x10, 0x31, 0x80, 0xb1, 0x11, 0x89, 0x18, 0x6c, 0x00, 0x08, 0x00, 0x00, 0x10,
        0x01, 0x80, 0x00, 0x20, 0x16, 0xc1, 0x24, 0x98, 0x21, 0x0e, 0x44, 0x00, 0x2c, 0x10, 0x10, 0x80,
        0x00, 0xe0, 0x00, 0xe0, 0x10, 0x47, 0x24, 0x81, 0x14, 0x43, 0x54, 0x00, 0x04, 0x12, 0x12, 0x60,
        0x00, 0x3b, 0x37, 0x80, 0x09, 0x24, 0x90, 0x11, 0x91, 0x30, 0x94, 0x00, 0x06, 0x00, 0x00, 0x40,
        0x00, 0x01, 0xd0, 0x00, 0x04, 0x9a, 0x0c, 0xcc, 0x11, 0x8c, 0x28, 0x00, 0x01, 0x80, 0x05, 0x80,
        0x00, 0x00, 0x00, 0x00, 0x06, 0x42, 0x26, 0x01, 0x14, 0xc5, 0x28, 0x00, 0x01, 0x80, 0x86, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x03, 0x25, 0x34, 0xd0, 0x41, 0x31, 0x00, 0x00, 0x00, 0x64, 0x38, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01, 0x8a, 0xc4, 0x4c, 0x91, 0x1c, 0x50, 0x00, 0x01, 0x37, 0x20, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x84, 0x01, 0x85, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x02, 0x48, 0x41, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x48, 0x49, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0xc0, 0x91, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x48, 0x88, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0xa4, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x4a, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x88, 0x88, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa4, 0x8a, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x22, 0x62, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x48, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4a, 0x08, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x44, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};*/
    const char optionsList[5][16] = {"Back", "Set time", "Set time zone", "24 hour", "Display seconds"};
    enum SettingsButtons // TODO: implement in settings_screen.cpp
    {
        BACK = 0,
        SET_TIME = 1,
        SET_TIME_ZONE = 2,
        HOUR_FORMAT = 3,
        SECONDS_FORMAT = 4
    };

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class ApListScreen : public MenuScreen
{
private:
    char ssidBuffer[64][21];
    short length = 0;
    const unsigned char wifi_sig1[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00};
    const unsigned char wifi_sig2[8] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xa0, 0x00};
    const unsigned char wifi_sig3[8] = {
        0x00, 0x00, 0x00, 0x08, 0x08, 0x28, 0xa8, 0x00};
    const unsigned char wifi_sig4[8] = {
        0x02, 0x02, 0x02, 0x0a, 0x0a, 0x2a, 0xaa, 0x00};
    const unsigned char *wifiSig[4] = {
        wifi_sig1,
        wifi_sig2,
        wifi_sig3,
        wifi_sig4};
    short scanStatus = -2;
    short scanStatusPrevious = -2;
    int min(int a, int b);
    short rssiToBars(int rssi);
    void populateList();

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class PasswordScreen : public MenuScreen
{
private:
    const char charList[47] = "abcdefghijklmnopqrstuvwxyz1234567890-=[];',./\\";
    const char charListShifted[48] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+{}:\"<>?|";
    const char charListButtons[6][10] = {"Space", "Backspace", "Shift", "Capslock", "Accept", "Back"};
    const short visibleCharCount = 10;
    bool inScrollable = true;
    bool isShifted = false;
    bool isCapsLocked = false;
    char passwordPreview[64];
    short charListScroll = 0;
    short passwordIndex = 0;
    enum PasswordButtons
    {
        SPACE = 0,
        BACKSPACE = 1,
        SHIFT = 2,
        CAPSLOCK = 3,
        ACCEPT = 4,
        BACK = 5
    };

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class InitializationScreen : public MenuScreen
{
public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class SetClockScreen : public MenuScreen
{
private:
    short selectionIndex = 0;
    short displayHour = 0;
    short displayMinute = 0;
    char meridian[2][3] = {"AM", "PM"};
    bool isPM = false;
    short cycleLength = 24;
    struct tm t = {};
    short clockDay = 0;
    const char *displayDay;
    short dayIndex = -1;
    short meridianIndex = -1;
    short clockSecondIndex = -1;
    const char *getDayOfWeekName(int day);

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class TimeZoneScreen : public MenuScreen
{
private:
    const char *tzRegions[16] = {
        "Back",
        "America/Honolulu",    // HST10
        "America/Anchorage",   // AKST9AKDT,M3.2.0/2,M11.1.0/2
        "America/Los Angeles", // PST8PDT,M3.2.0/2,M11.1.0/2
        "America/Denver",      // MST7MDT,M3.2.0/2,M11.1.0/2
        "America/Chicago",     // CST6CDT,M3.2.0/2,M11.1.0/2
        "America/New York",    // EST5EDT,M3.2.0/2,M11.1.0/2
        "America/Halifax",     // AST4ADT,M3.2.0/2,M11.1.0/2
        "America/St. John's",  // NST3:30NDT,M3.2.0/2,M11.1.0/2
        "Europe/London",       // GMT0BST,M3.5.0/1,M10.5.0/2
        "Australia/Perth",     // AWST-8
        "Australia/Adelaide",  // ACST-9:30ACDT,M10.1.0/2,M4.1.0/3
        "Australia/Sydney",    // AEST-10AEDT,M10.1.0/2,M4.1.0/3
        "Australia/Lord Howe", // LHST-10:30LHDT-11,M10.1.0/2,M4.1.0/2
        "Pacific/Auckland",    // NZST-12NZDT,M9.5.0/2,M4.1.0/3
        "Custom",
    };
    const char *tzStrings[14] = {
        "HST10",                                // Honolulu
        "AKST9AKDT,M3.2.0/2,M11.1.0/2",         // Anchorage
        "PST8PDT,M3.2.0/2,M11.1.0/2",           // Los Angeles
        "MST7MDT,M3.2.0/2,M11.1.0/2",           // Denver
        "CST6CDT,M3.2.0/2,M11.1.0/2",           // Chicago
        "EST5EDT,M3.2.0/2,M11.1.0/2",           // New York
        "AST4ADT,M3.2.0/2,M11.1.0/2",           // Halifax
        "NST3:30NDT,M3.2.0/2,M11.1.0/2",        // St. John's
        "GMT0BST,M3.5.0/1,M10.5.0/2",           // London
        "AWST-8",                               // Perth
        "ACST-9:30ACDT,M10.1.0/2,M4.1.0/3",     // Adelaide
        "AEST-10AEDT,M10.1.0/2,M4.1.0/3",       // Sydney
        "LHST-10:30LHDT-11,M10.1.0/2,M4.1.0/2", // Lord Howe
        "NZST-12NZDT,M9.5.0/2,M4.1.0/3",        // Auckland
    };

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

class CustomTzScreen : public MenuScreen
{
private:
    struct dstEntry
    {
        short month = 1;
        short week = 1;
        short day;
        short hour;
    };
    dstEntry start, end;
    short hour, minute;
    char customTz[33];
    char sign = '+';

public:
    void setup() override;
    void loop() override;
    void render() override;
    void left() override;
    void right() override;
    void select() override;
};

#endif // ALARMAGEDDON_H
